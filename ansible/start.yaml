---
- hosts: all
  tasks:
    
    - name: create kafka directory
      file:
        path: "{{ lookup('env', 'PWD') }}"
        state: directory
        
    - name: set exec mod
      file:
        path: "{{ lookup('env', 'PWD') }}/scripts"
        state: directory
        mode: 0775
        recurse: yes

    - stat:
        path: "/root/bin/cryptogen"
      register: fabric_tools
      
    - name: down fabric tool and image 0 
      get_url:
        url: https://bit.ly/2ysbOFE
        dest: "{{ lookup('env', 'PWD') }}/tmp.sh"
        mode: 0775
        validate_certs: no 
      when: fabric_tools.stat.exists == false
      
    - name: down fabric tool and image 1
      command: "sh {{ lookup('env', 'PWD') }}/tmp.sh 1.4.6 -s  "  
      when: fabric_tools.stat.exists == false

- hosts: host1
  tasks: 
      
    - name: generate config block
      command: "sh {{ lookup('env', 'PWD') }}/scripts/generate.sh {{ lookup('env', 'PWD') }}"
      register: result
      
    - debug: msg={{result}}   
 
  

    
    
- hosts: all
  environment:
    orderer0_orderer_example_com: "{{ hosts.host1.ip }}"
    couchdb0_example_com: "{{ hosts.host1.ip }}"
    peer0_org1_example_com: "{{ hosts.host1.ip }}"
    kafka0_example_com: "{{ hosts.host1.ip }}"
    zookeeper0_example_com: "{{ hosts.host1.ip }}"
    orderer1_orderer_example_com: "{{ hosts.host2.ip }}"
    couchdb1_example_com: "{{ hosts.host2.ip }}" 
    peer0_org2_example_com: "{{ hosts.host2.ip }}" 
    kafka1_example_com: "{{ hosts.host2.ip }}" 
    zookeeper1_example_com: "{{ hosts.host2.ip }}" 
    orderer2_orderer_example_com: "{{ hosts.host3.ip }}"
    couchdb2_example_com: "{{ hosts.host3.ip }}" 
    peer0_org3_example_com: "{{ hosts.host3.ip }}" 
    kafka2_example_com: "{{ hosts.host3.ip }}" 
    zookeeper2_example_com: "{{ hosts.host3.ip }}" 
    IMAGE_TAG: "latest"
    COMPOSE_PROJECT_NAME: "test"
  tasks:

    - name: start network in host1
      command: "docker-compose -f  /root/kafka/docker-compose-host1.yaml  up -d "
      when:  '"host1" in group_names' 


    - name: copy script file
      synchronize:
        src:  "/root/kafka/"
        dest: "/root/kafka/"  
      when:  '"host1" not in group_names'         
        
    - name: start network in host2
      command: "docker-compose -f  /root/kafka/docker-compose-host2.yaml  up -d "
      when:  '"host2" in group_names' 

      
    - name: start network in host3
      command: "docker-compose -f  /root/kafka/docker-compose-host3.yaml  up -d"     
      when:  '"host3" in group_names'       
       

    - name: timed wait for kafka cluster boot
      pause: seconds=30 

  
    - name: join channnel and install chaincode and instantiate
      command: "docker exec  cli bash -c  '/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/init.sh 1'"
      register: result  
      when:  '"host1" in group_names'    
      
    - debug: msg={{result}}  
      when:  '"host1" in group_names'    

    - name: join channnel and install chaincode
      command: "docker exec  cli bash -c  '/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/init.sh 0'"
      register: result  
      when:  '"host1" not in group_names'           
      
    - debug: msg={{result}} 
      when:  '"host1" not in group_names'     